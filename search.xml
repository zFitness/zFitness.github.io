<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java8</title>
      <link href="/2020/02/29/java8/"/>
      <url>/2020/02/29/java8/</url>
      
        <content type="html"><![CDATA[<h2 id="java8-新特性"><a href="#java8-新特性" class="headerlink" title="java8 新特性"></a>java8 新特性</h2><h2 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1 Lambda表达式"></a>1 Lambda表达式</h2><ul><li>lambda 是一个匿名函数， </li></ul><p>lambda 表达式基本语法： java8中引入了一个新的操作符：<code>-&gt;</code>   lambda 操作符。</p><p>结构分为两部分：</p><ul><li>左侧：lambda表达式的参数列表</li><li>右侧：Lambda表达式中需要执行的功能， lambda体</li></ul><p>语法格式</p><ul><li>语法格式一： 无参数，无返回值<ul><li><code>() -&gt; {}</code>，  例如： Runnable</li></ul></li><li>语法格式二： 一个参数，无返回值， 小括号可以省略不写<ul><li><code>(x) -&gt; {}</code>,  例如： Consumer，</li></ul></li><li>语法格式三：有两个以上参数，有返回值， 如果只有一条语句， return和大括号可以省略不写<ul><li><code>(x, y) -&gt; {return }</code>,  例如：Comparator</li></ul></li><li>语法格式六：lambda的参数列表的数据类型可以省略， 因为JVM编译器通过上下文推断出，数据类型，即“类型推断”。</li></ul><p>上联：左右遇一括号省,</p><p>下联：左侧推断类型省</p><p>横批： 能省则省</p><blockquote><p>lambda表达式需要函数式接口支持。</p></blockquote><h2 id="2-​​函数式接口"><a href="#2-​​函数式接口" class="headerlink" title="2 ​​函数式接口"></a>2 ​​函数式接口</h2><p>函数式接口： 接口中只有一个抽象方法的接口， 可以使用 <code>@FunctionalInterface</code> 修饰。</p><h3 id="2-1-java核心函数式接口"><a href="#2-1-java核心函数式接口" class="headerlink" title="2.1 java核心函数式接口"></a>2.1 java核心函数式接口</h3><ul><li><p><code>Consumer&lt;T&gt;</code>: 消费型接口</p><ul><li><code>void accept(T t);</code>  :accept:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Consumer&lt;T&gt; 消费型接口</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   happy(<span class="number">1000</span>, x -&gt; System.out.println(<span class="string">"吃饭花了"</span> + x + <span class="string">"元"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">happy</span><span class="params">(<span class="keyword">double</span> money, Consumer&lt;Double&gt; consumer)</span> </span>&#123;</span><br><span class="line">   consumer.accept(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Supplier&lt;T&gt;</code>： 供给型接口</p><ul><li><code>T get();</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = getNumberlist(<span class="number">10</span>, () -&gt; (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>));</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需求：产生指定一些整数， 并放入集合中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNumberlist</span><span class="params">(<span class="keyword">int</span> num, Supplier&lt;Integer&gt; supplier)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        list.add(supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Function&lt;T, R&gt;</code> : 函数型接口</p><ul><li><code>R apply(T t);</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function&lt;T,R&gt;  函数型接口</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(getLength(<span class="string">"ddd"</span>, x -&gt; x.length()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getLength</span><span class="params">(String str, Function&lt;String, Integer&gt; function)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> function.apply(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Predicate&lt;T&gt;</code>: 断言型接口</p><ul><li><code>boolean test(T t)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"aa"</span>);</span><br><span class="line">    List&lt;String&gt; filterList = filter(list, x -&gt; x.length() &gt; <span class="number">2</span>);</span><br><span class="line">    filterList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">filter</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; predicate)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(s)) &#123;</span><br><span class="line">            list1.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-java-其他函数式接口"><a href="#2-2-java-其他函数式接口" class="headerlink" title="2.2 java 其他函数式接口"></a>2.2 java 其他函数式接口</h3><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td><code>BiFunction&lt;T,U,R&gt;</code></td><td>T, U</td><td>U</td><td>对类型为T,R 参数应用操作，返回 R 类型的结果。包含方法为            <code>R apply(T t, U u)</code></td></tr><tr><td><code>UnaryOperator&lt;T&gt;</code></td><td>T</td><td>T</td><td>对类型为T的对象进行一元运算，并返回T类型的结果。包含方法为     <code>T apply(T t);</code></td></tr><tr><td><code>BinaryOperator&lt;T&gt;</code></td><td>T, T</td><td>T</td><td>代表了一个作用于于两个同类型操作符的操作，并且返回了操作符同类型的结果。包含方法：                              <code>T apply(T t1, T t2)</code></td></tr><tr><td><code>BiConsumer&lt;T,U&gt;</code></td><td>T, U</td><td>void</td><td>代表了一个接受两个输入参数的操作，并且不返回任何结果。                 <code>void accept(T t, U u)</code></td></tr><tr><td><code>ToIntFunction&lt;T&gt;</code>         <code>ToLongFunction&lt;T&gt;</code>  <code>ToDoubleFunction&lt;T&gt;</code></td><td>T</td><td>int              long                                 double</td><td>接受两个输入参数，分别返回一个int,long,double类型结果。</td></tr><tr><td><code>BiPredicate&lt;T,U&gt;</code></td><td>T,U</td><td>boolean</td><td>代表了对两个参数的断言操作（基于Boolean值的方法）</td></tr></tbody></table><p>函数式接口通过一个单一的功能来表现。例如，带有单个<code>compareTo</code>方法的比较接口，被用于比较的场合。Java 8 开始定义了大量的函数式接口来广泛地用于lambda表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BiFunction&lt;Integer, Integer, Employee&gt; bf1 = (x, y) -&gt; <span class="keyword">new</span> Employee(x, y);  <span class="comment">//返回第三个参数</span></span><br><span class="line">BiPredicate&lt;String, String&gt; bp = (x, y) -&gt; x.equals(y);  <span class="comment">//返回 boolean</span></span><br></pre></td></tr></table></figure><h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3 引用"></a>3 引用</h2><h3 id="3-1-方法引用"><a href="#3-1-方法引用" class="headerlink" title="3.1 方法引用"></a>3.1 方法引用</h3><p>:notebook:语法格式</p><ul><li><code>对象:: 实例方法名:</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);</span><br><span class="line">Consumer&lt;String&gt; consumer = System.out::print;</span><br></pre></td></tr></table></figure><ul><li><code>类::静态方法名</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Double&gt; supplier = Math::random;</span><br></pre></td></tr></table></figure><ul><li><code>类:: 实例方法名</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BiPredicate&lt;String, String&gt; bp = (x, y) -&gt; x.equals(y);</span><br><span class="line">BiPredicate&lt;String, String&gt; bp1 = String::equals;</span><br></pre></td></tr></table></figure><blockquote><ul><li>lambda 体中调用方法的参数列表与返回值类型，要与函数式接口中抽象方法的函数列表和返回值类型保持一致。</li><li>若 lambda 参数列表中的<strong>第一参数</strong>是实例方法的调用者， 而第二个参数是实例方法的参数时,可以使用 <code>ClassName::method</code></li></ul></blockquote><h3 id="3-2-构造器引用"><a href="#3-2-构造器引用" class="headerlink" title="3.2 构造器引用"></a>3.2 构造器引用</h3><p>格式：</p><ul><li><code>ClassName::new</code></li></ul><p>实例：</p><ul><li>无参数的构造器引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lambda</span></span><br><span class="line">Supplier&lt;Employee&gt; sup = () -&gt; <span class="keyword">new</span> Employee();</span><br><span class="line"><span class="comment">//构造器引用</span></span><br><span class="line">Supplier&lt;Employee&gt; sup2 = Employee::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure><ul><li>一个参数的构造器引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lambda</span></span><br><span class="line">Function&lt;Integer, Employee&gt; function = x -&gt; <span class="keyword">new</span> Employee(x);</span><br><span class="line">function.apply(<span class="number">111</span>);</span><br><span class="line"><span class="comment">// 有1个参数的构造器引用</span></span><br><span class="line">Function&lt;Integer, Employee&gt; function1 = Employee::<span class="keyword">new</span>;</span><br><span class="line">function1.apply(<span class="number">101</span>);  <span class="comment">// return new Employee(101)</span></span><br></pre></td></tr></table></figure><ul><li>有2个参数的构造器引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BiFunction&lt;Integer, Integer, Employee&gt; bf1 = (x, y) -&gt; <span class="keyword">new</span> Employee(x, y);</span><br><span class="line"><span class="comment">// 有2个参数的构造器引用</span></span><br><span class="line">BiFunction&lt;Integer, Integer, Employee&gt; bf = Employee::<span class="keyword">new</span>;</span><br><span class="line">bf.apply(<span class="number">10</span>, <span class="number">1000</span>);  <span class="comment">//return new Employee(10, 1000);</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： 需要调用的构造器参数列表要与函数式接口中抽象方法的参数列表保持一致。</p></blockquote><h3 id="3-3-数组引用"><a href="#3-3-数组引用" class="headerlink" title="3.3 数组引用"></a>3.3 数组引用</h3><p>语法格式：</p><ul><li><code>Type::new</code> </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lambda</span></span><br><span class="line">Function&lt;Integer, String[]&gt; function = (x) -&gt; <span class="keyword">new</span> String[x];</span><br><span class="line">String[] apply = function.apply(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组引用</span></span><br><span class="line">Function&lt;Integer, String[]&gt; function1 = String[]::<span class="keyword">new</span>;</span><br><span class="line">String apply1 = function1.apply(<span class="number">10</span>);  <span class="comment">//new String[10]</span></span><br></pre></td></tr></table></figure><h2 id="4-Stream-API"><a href="#4-Stream-API" class="headerlink" title="4. Stream API"></a>4. Stream API</h2><p><code>Stream API (java.util.stream.*)</code> </p><h4 id="4-1-创建-Stream-流"><a href="#4-1-创建-Stream-流" class="headerlink" title="4.1 创建 Stream 流"></a>4.1 创建 Stream 流</h4><ol><li>通过 Collection 的 stream(串行) 方法或者 parallelStream(并行) 方法创建集合流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">Stream&lt;String&gt; stringStream = list.parallelStream();</span><br></pre></td></tr></table></figure><ol start="2"><li>通过 Arrays 的静态方法 stream 获取数组流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Employee[] employees = <span class="keyword">new</span> Employee[<span class="number">10</span>];</span><br><span class="line">Stream&lt;Employee&gt; stream1 = Arrays.stream(employees);</span><br></pre></td></tr></table></figure><ol start="3"><li>通过 Stream 类的静态方法<code>of</code>获取流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>创建无限流</p><ol><li><p>迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">0</span>, x -&gt; x + <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Double&gt; stream2 = Stream.generate(() -&gt; Math.random());</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="4-2-中间操作"><a href="#4-2-中间操作" class="headerlink" title="4.2 中间操作"></a>4.2 中间操作</h4><p>多个中间操作可以连接起来形成一个流水线， 除非流水线上触发终止操作， 否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“<strong>惰性求值</strong>”。</p><p><strong>筛选与切片</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>filter(Predicate p)</code></td><td>接收 lambda, 从流中排除某些元素</td></tr><tr><td><code>distinct()</code></td><td>筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素(可能需要自己手动重写方法)</td></tr><tr><td><code>limit(long maxSize)</code></td><td>截断流，使其元素不超过给定数量</td></tr><tr><td><code>skip(long n)</code></td><td>跳过元素， 返回一个扔掉了前n个元素的流。若流中元素不足n个， 则返回一个空流。与 limit(n) 互补。</td></tr></tbody></table><p><strong>映射</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>map</code></td><td>接收 lambda, 将元素转换成其他形式或提取信息， 接收一个函数作为参数，该函数会被应用到每个元素。</td></tr><tr><td><code>flatMap</code></td><td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</td></tr><tr><td><code>mapToInt(ToIntFunction f)</code></td><td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 IntStream。</td></tr><tr><td><code>mapToLong(ToLongFunction f)</code></td><td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 LongStream</td></tr><tr><td><code>mapToDouble(ToDoubleFunction f)</code></td><td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 DoubleStream</td></tr></tbody></table><blockquote><p>map 和 flatMap 类似于 List 的 add方法和 addAll 方法</p></blockquote><p><strong>排序</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>sorted()</code></td><td>自然排序</td></tr><tr><td><code>sorted(Comparator com)</code></td><td>定制排序</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;String&gt; comparator = (x,y) -&gt;  x.length() - y.length();</span><br><span class="line">        list.stream()</span><br><span class="line">                .sorted(comparator)</span><br><span class="line">                .forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="4-3-终止操作"><a href="#4-3-终止操作" class="headerlink" title="4.3 终止操作"></a>4.3 终止操作</h4><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值。例如：List, Integer, 甚至是 void。</p><p><strong>查找和匹配</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>allMatch(Predicate p)</code></td><td>检查是否匹配所有元素</td></tr><tr><td><code>anyMatch(Predicate p)</code></td><td>检查是否至少匹配一个元素</td></tr><tr><td><code>noneMatch(Predicate p)</code></td><td>检查是否没有匹配所有元素</td></tr><tr><td><code>findFirst()</code></td><td>返回第一个元素</td></tr><tr><td><code>findAny()</code></td><td>返回当前流中的任意元素</td></tr><tr><td><code>count()</code></td><td>返回流中元素个数</td></tr><tr><td><code>max()</code></td><td>返回流中最大值</td></tr><tr><td><code>min()</code></td><td>返回流中最小值</td></tr></tbody></table><ul><li>Optional</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Employee&gt; op = employees.stream()</span><br><span class="line">                .sorted((e1, e2) -&gt; -Double.compare(e1.getSalary(), e2.getSalary()))</span><br><span class="line">                .findFirst(); <span class="comment">//有可能为空就返回 Optional</span></span><br><span class="line">System.out.println(op.get());</span><br></pre></td></tr></table></figure><p><strong>规约</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>reduce(T identity, BinaryOperator)</code></td><td>可以将流中元素反复结合起来， 得到一个值。ideantity: 起始值， 返回值为 T</td></tr><tr><td><code>reduce(BinaryOperator)</code></td><td>返回值为 <code>Optinal</code> ,因为没有起始值，可能为 null</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">Integer sum = list.stream().reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br></pre></td></tr></table></figure><blockquote><p>map 和 reduce 的连接通常称为 <code>map-reduce</code> 模式, 因 Google 用它来进行网络搜索而出名。</p></blockquote><p><strong>收集</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>collect(Collector collector);</code></td><td></td></tr><tr><td><code>collect(Supplier supplier, BiConsumer accumulator, BiConsumer combiner);</code></td><td></td></tr></tbody></table><p>Collector 接口中方法的实现决定了如何对流进行收集操作(如收集到List , Set, Map)。但是 Collectors 工具类提供了很多静态方法， 可以方便地创建常见收集器实例， 具体方法与实例如下表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转化为 List</span></span><br><span class="line">List&lt;String&gt; list = employees.stream().map(Employee::getUsername).collect(Collectors.toList());</span><br><span class="line"><span class="comment">//转化为 Set</span></span><br><span class="line">Set&lt;Double&gt; set = employees.stream().map(Employee::getSalary).collect(Collectors.toSet());</span><br><span class="line"><span class="comment">//转化为 HashSet</span></span><br><span class="line">HashSet&lt;String&gt; set1 = employees.stream().map(Employee::getUsername).collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line"><span class="comment">//转化为 LinkedBlockingQueue</span></span><br><span class="line">LinkedBlockingQueue&lt;Employee&gt; queue = employees.stream().collect(Collectors.toCollection(LinkedBlockingQueue::<span class="keyword">new</span>));</span><br><span class="line"><span class="comment">//元素总数</span></span><br><span class="line">Long sum = employees.stream().collect(Collectors.counting());</span><br><span class="line"><span class="comment">//工资平均值</span></span><br><span class="line">Double avg = employees.stream().collect(Collectors.averagingDouble(Employee::getSalary));</span><br><span class="line"><span class="comment">//总和</span></span><br><span class="line">Double sum1 = employees.stream().collect(Collectors.summingDouble(Employee::getSalary));</span><br><span class="line"><span class="comment">//最大值</span></span><br><span class="line">Optional&lt;Employee&gt; max = employees.stream().collect(Collectors.maxBy((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line"><span class="comment">//最小值</span></span><br><span class="line">Optional&lt;Employee&gt; min = employees.stream().collect(Collectors.maxBy((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line"><span class="comment">//分组</span></span><br><span class="line">Map&lt;Employee.Status, List&lt;Employee&gt;&gt; map = employees.stream().collect(Collectors.groupingBy(Employee::getStatus));</span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">//字符串拼接</span></span><br><span class="line">String str = employees.stream().map(Employee::getUsername).collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">//多级分组</span></span><br><span class="line">Map&lt;Employee.Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; map1 = employees.stream().collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy(x -&gt; x.getAge() &gt; <span class="number">30</span> ? <span class="string">"青年"</span> : <span class="string">"少年"</span>)));</span><br><span class="line">System.out.println(map1);</span><br><span class="line"><span class="comment">//分区</span></span><br><span class="line">Map&lt;Boolean, List&lt;Employee&gt;&gt; map2 = employees.stream().collect(Collectors.partitioningBy(x -&gt; x.getAge() &gt; <span class="number">33</span>));</span><br><span class="line"><span class="comment">//一次得到最大值，最小值，平均值...</span></span><br><span class="line">DoubleSummaryStatistics summary = employees.stream().collect(Collectors.summarizingDouble(Employee::getSalary));</span><br><span class="line">System.out.println(summary.getMax());</span><br></pre></td></tr></table></figure><h2 id="5-​​并行流和串行流"><a href="#5-​​并行流和串行流" class="headerlink" title="5 ​​并行流和串行流"></a>5 ​​并行流和串行流</h2><p>并行流就是把一个内容分成多个数据块， 并用不同的线程分别处理每个数据块的流。</p><p>java8 中将并行进行了优化， 我们可以很容易的对数据进行并行操作。``Stream API<code>可以声明性地通过</code>parallel()<code>与</code>sequential()` 在并行流与顺序流之间进行切换。</p><h3 id="5-1-fork-join-框架"><a href="#5-1-fork-join-框架" class="headerlink" title="5.1 fork/join 框架"></a>5.1 fork/join 框架</h3><p>Fork/Join 框架： 就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务（拆到不可再拆时），再将一个个的小任务运算的结果进行 join 汇总 。（类似于分治算法）</p><p><img src="http://img.zmblog.wang/blog/20200228/fJ4L6Y8vb0lE.png?imageslim" alt="mark"></p><h4 id="和线程池区别"><a href="#和线程池区别" class="headerlink" title="和线程池区别"></a>和线程池区别</h4><p>采用 “工作窃取”模式（work-stealing）：<br>当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。</p><p>相对于一般的线程池实现,fork/join框架的优势体现在对其中包含的任务的处理方式上。在一般的线程池中,如果一个线程正在执行的任务由于某些原因无法继续运行,那么该线程会处于等待状态。而在fork/join框架实现中,如果<br>某个子问题由于等待另外一个子问题的完成而无法继续运行，那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行。这种方式减少了线程的等待时间,提高了性能 。</p><h4 id="fork-join-使用例子"><a href="#fork-join-使用例子" class="headerlink" title="fork/join 使用例子"></a>fork/join 使用例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinCalcalue</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> THRESHOLD = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinCalcalue</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> length = end - start;</span><br><span class="line">        <span class="comment">//小于临界值进行累加</span></span><br><span class="line">        <span class="keyword">if</span> (length &lt;= THRESHOLD) &#123;</span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> mid = start + ((end - start) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            ForkJoinCalcalue left = <span class="keyword">new</span> ForkJoinCalcalue(start, mid);</span><br><span class="line">            <span class="comment">//拆分子任务，同时压入线程队列</span></span><br><span class="line">            left.fork();</span><br><span class="line">            ForkJoinCalcalue right = <span class="keyword">new</span> ForkJoinCalcalue(mid + <span class="number">1</span>, end);</span><br><span class="line">            right.fork();</span><br><span class="line">            <span class="comment">//合并</span></span><br><span class="line">            <span class="keyword">return</span> left.join() + right.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> ForkJoinCalcalue(<span class="number">0</span>, <span class="number">100000000000L</span>);</span><br><span class="line">Long sum = pool.invoke(task);</span><br></pre></td></tr></table></figure><p>在java8后，对其进行了简化，java8的并行流底层就是 <code>fork/join</code>, 简化代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OptionalLong sum = LongStream.rangeClosed(<span class="number">0</span>, <span class="number">100000000000L</span>)</span><br><span class="line">                .parallel()</span><br><span class="line">                .reduce(Long::sum);</span><br></pre></td></tr></table></figure><h2 id="6-Optional-类"><a href="#6-Optional-类" class="headerlink" title="6 Optional 类"></a>6 Optional 类</h2><p><code>Optional&lt;T&gt;</code> 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 <code>null</code>表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。  </p><p><strong>常用方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Optional.of(T t) : 创建一个 Optional 实例</span><br><span class="line">Optional.empty() : 创建一个空的 Optional 实例</span><br><span class="line">Optional.ofNullable(T t):若 t 不为 <span class="keyword">null</span>,创建 Optional 实例,否则创建空实例</span><br><span class="line">isPresent() : 判断是否包含值</span><br><span class="line">orElse(T t) : 如果调用对象包含值，返回该值，否则返回t</span><br><span class="line">orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值</span><br><span class="line">map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()</span><br><span class="line">flatMap(Function mapper):与 map 类似，要求返回值必须是Optional</span><br></pre></td></tr></table></figure><h2 id="7-默认方法和静态方法"><a href="#7-默认方法和静态方法" class="headerlink" title="7 默认方法和静态方法"></a>7 默认方法和静态方法</h2><p>Java 8中允许接口中包含具有具体实现的方法，该方法称为“默认方法”，默认方法使用 <code>default</code> 关键字修饰。</p><h4 id="接口默认方法的”-类优先”-原则"><a href="#接口默认方法的”-类优先”-原则" class="headerlink" title="接口默认方法的” 类优先” 原则"></a>接口默认方法的” 类优先” 原则</h4><p>若一个接口中定义了一个默认方法，而另外一个父类或接口中<br>又定义了一个同名的方法时。</p><ul><li>选择父类中的方法。如果一个父类提供了具体的实现，那么<br>接口中具有相同名称和参数的默认方法会被忽略。</li><li><strong>接口冲突</strong>。如果一个父接口提供一个默认方法，而另一个接<br>口也提供了一个具有相同名称和参数列表的方法（不管方法<br>是否是默认方法）， 那么必须覆盖该方法来解决冲突  </li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tools</title>
      <link href="/2020/02/25/tools/"/>
      <url>/2020/02/25/tools/</url>
      
        <content type="html"><![CDATA[<h1 id="我的win10常用工具"><a href="#我的win10常用工具" class="headerlink" title="我的win10常用工具"></a>我的win10常用工具</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 学习笔记</title>
      <link href="/2020/02/25/docker/"/>
      <url>/2020/02/25/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1 Docker简介"></a>1 Docker简介</h1><h2 id="1-1-什么是虚拟化"><a href="#1-1-什么是虚拟化" class="headerlink" title="1.1 什么是虚拟化"></a>1.1 什么是虚拟化</h2><p>​    在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p><p>​    在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用</p><p>​    虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p><h2 id="1-2-什么是Docker"><a href="#1-2-什么是Docker" class="headerlink" title="1.2 什么是Docker"></a>1.2 什么是Docker</h2><p>​    Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker" target="_blank" rel="noopener">GitHub</a> 上进行维护。</p><p>​    <img src="image/1-3.png" alt=""></p><p>​    Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p><p>​    Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p><p>​    在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><p>为什么选择Docker?</p><p>（1）上手快。</p><p>​    用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。    </p><pre><code>随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</code></pre><p>（2）职责的逻辑分类</p><p>​    使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p><p>（3）快速高效的开发生命周期</p><p>​    Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</p><p>（4）鼓励使用面向服务的架构</p><p>​    Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</p><h2 id="1-3-容器与虚拟机比较"><a href="#1-3-容器与虚拟机比较" class="headerlink" title="1.3 容器与虚拟机比较"></a>1.3 容器与虚拟机比较</h2><p>​    下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</p><p><img src="image/1-1.png" alt=""></p><p>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p><h2 id="1-4-Docker-组件"><a href="#1-4-Docker-组件" class="headerlink" title="1.4 Docker 组件"></a>1.4 Docker 组件</h2><h3 id="1-4-1-Docker服务器与客户端"><a href="#1-4-1-Docker服务器与客户端" class="headerlink" title="1.4.1 Docker服务器与客户端"></a>1.4.1 Docker服务器与客户端</h3><p>​    Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p><p><img src="image/1-2.png" alt=""></p><h3 id="1-4-2-Docker镜像与容器"><a href="#1-4-2-Docker镜像与容器" class="headerlink" title="1.4.2 Docker镜像与容器"></a>1.4.2 Docker镜像与容器</h3><p>​    镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</p><p>添加一个文件；</p><p>执行一个命令；</p><p>打开一个窗口。</p><p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p><p>​    Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。  容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。</p><p>所以Docker容器就是：</p><p>​    一个镜像格式；</p><p>​    一些列标准操作；</p><p>​    一个执行环境。</p><p>​    Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。</p><pre><code>和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</code></pre><h3 id="1-4-3-Registry（注册中心）"><a href="#1-4-3-Registry（注册中心）" class="headerlink" title="1.4.3 Registry（注册中心）"></a>1.4.3 Registry（注册中心）</h3><p>​    Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。</p><p>​    <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h1 id="2-Docker安装与启动"><a href="#2-Docker安装与启动" class="headerlink" title="2 Docker安装与启动"></a>2 Docker安装与启动</h1><h2 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h2><p>​    Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p><p>​    注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。</p><ul><li><p>daocloud 提供的安装方式：</p><ul><li><a href="http://get.daocloud.io/" target="_blank" rel="noopener">daocloud</a></li></ul></li><li><p>Centos7.x镜像    :</p></li></ul><p>（1）yum 包更新到最新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>（3）设置yum源为阿里云</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure><p>（4）安装docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p>（5）安装后查看docker版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="2-2-换源"><a href="#2-2-换源" class="headerlink" title="2.2 换源"></a>2.2 换源</h2><p>docker 官方源在国内是非常慢的，国内比较好用的源是 daocloud.</p><ul><li>一键换源脚本</li></ul><p><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">https://www.daocloud.io/mirror#accelerator-doc</a></p><ul><li>手动换源</li></ul><p>更改docker 的<code>源</code>配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure><p>在该文件中输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;f1361db2.m.daocloud.io&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-Docker的启动与停止"><a href="#2-3-Docker的启动与停止" class="headerlink" title="2.3 Docker的启动与停止"></a>2.3 Docker的启动与停止</h2><p><strong>systemctl</strong>命令是系统服务管理器指令</p><p>启动docker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>停止docker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>重启docker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>查看docker状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p>查看docker概要信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>查看docker帮助文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --help</span><br></pre></td></tr></table></figure><h1 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3 常用命令"></a>3 常用命令</h1><h2 id="3-1-镜像相关命令"><a href="#3-1-镜像相关命令" class="headerlink" title="3.1 镜像相关命令"></a>3.1 镜像相关命令</h2><h3 id="3-1-1-查看镜像"><a href="#3-1-1-查看镜像" class="headerlink" title="3.1.1 查看镜像"></a>3.1.1 查看镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>REPOSITORY：镜像名称</p><p>TAG：镜像标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像的创建日期（不是获取该镜像的日期）</p><p>SIZE：镜像大小</p><p>这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</p><h3 id="3-1-2-搜索镜像"><a href="#3-1-2-搜索镜像" class="headerlink" title="3.1.2 搜索镜像"></a>3.1.2 搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure><p>NAME：仓库名称</p><p>DESCRIPTION：镜像描述</p><p>STARS：用户评价，反应一个镜像的受欢迎程度</p><p>OFFICIAL：是否官方</p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><h3 id="3-1-3-拉取镜像"><a href="#3-1-3-拉取镜像" class="headerlink" title="3.1.3 拉取镜像"></a>3.1.3 拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure><p>例如，我要下载centos7镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:7</span><br></pre></td></tr></table></figure><h3 id="3-1-4-删除镜像"><a href="#3-1-4-删除镜像" class="headerlink" title="3.1.4 删除镜像"></a>3.1.4 删除镜像</h3><p>按镜像ID删除镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure><p>删除所有镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi &#96;docker images -q&#96;</span><br></pre></td></tr></table></figure><p>不能删除问题，是由于多个镜像id相同， 可以直接用名称删除.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 192.168.1.111&#x2F;centos&#x2F;centos:7.2</span><br></pre></td></tr></table></figure><p>必须先把镜像创建的容器全部删除才能删除镜像。</p><h2 id="3-2-容器相关命令"><a href="#3-2-容器相关命令" class="headerlink" title="3.2 容器相关命令"></a>3.2 容器相关命令</h2><h3 id="3-2-1-查看容器"><a href="#3-2-1-查看容器" class="headerlink" title="3.2.1 查看容器"></a>3.2.1 查看容器</h3><p>查看正在运行的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看所有容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps –a</span><br></pre></td></tr></table></figure><p>查看最后一次运行的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps –l</span><br></pre></td></tr></table></figure><p>查看停止的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -f status&#x3D;exited</span><br></pre></td></tr></table></figure><p>查看容器日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs</span><br></pre></td></tr></table></figure><h3 id="3-2-2-创建与启动容器"><a href="#3-2-2-创建与启动容器" class="headerlink" title="3.2.2 创建与启动容器"></a>3.2.2 创建与启动容器</h3><p>创建容器常用的参数说明：</p><p>创建容器命令：docker run</p><p> -i：表示运行容器</p><p> -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</p><p> –name :为创建的容器命名。</p><p> -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p><p> -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p><p> -p：表示端口映射，前者是<code>宿主机</code>端口，后者是<code>容器</code>内的映射端口。可以使用多个-p做多个端口映射</p><p>（1）交互式方式创建容器</p><blockquote><p>容器的name 必须唯一</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name&#x3D;容器名称 镜像名称:标签 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态  </p><p>退出当前容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>（2）守护式方式创建容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;容器名称 镜像名称:标签</span><br></pre></td></tr></table></figure><p>登录守护式容器方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器名称 (或者容器ID)  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h3 id="3-2-3-停止与启动容器"><a href="#3-2-3-停止与启动容器" class="headerlink" title="3.2.3 停止与启动容器"></a>3.2.3 停止与启动容器</h3><p>停止容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure><p>启动容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure><h3 id="3-2-4-文件拷贝"><a href="#3-2-4-文件拷贝" class="headerlink" title="3.2.4 文件拷贝"></a>3.2.4 文件拷贝</h3><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 需要拷贝的文件或目录 容器名称:容器目录</span><br></pre></td></tr></table></figure><p>也可以将文件从容器内拷贝出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器名称:容器需要拷贝的文件或目录 文件名</span><br></pre></td></tr></table></figure><h3 id="3-2-5-目录挂载"><a href="#3-2-5-目录挂载" class="headerlink" title="3.2.5 目录挂载"></a>3.2.5 目录挂载</h3><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>创建容器 添加-v参数 后边为   <code>宿主机目录:容器目录</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -v &#x2F;usr&#x2F;local&#x2F;myhtml:&#x2F;usr&#x2F;local&#x2F;myhtml --name&#x3D;mycentos3 centos:7</span><br></pre></td></tr></table></figure><p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p><p>这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数  –privileged=true  来解决挂载的目录没有权限的问题</p><h3 id="3-2-6-查看容器IP地址"><a href="#3-2-6-查看容器IP地址" class="headerlink" title="3.2.6 查看容器IP地址"></a>3.2.6 查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称（容器ID）</span><br></pre></td></tr></table></figure><p>也可以直接执行下面的命令直接输出IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format&#x3D;&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h3 id="3-2-7-删除容器"><a href="#3-2-7-删除容器" class="headerlink" title="3.2.7 删除容器"></a>3.2.7 删除容器</h3><p>删除指定的容器：</p><p>必须先把容器停止才能删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器名称（容器ID）</span><br></pre></td></tr></table></figure><p>删除所有停止容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure><h1 id="4-应用部署"><a href="#4-应用部署" class="headerlink" title="4 应用部署"></a>4 应用部署</h1><h2 id="4-1-MySQL部署"><a href="#4-1-MySQL部署" class="headerlink" title="4.1 MySQL部署"></a>4.1 MySQL部署</h2><p>（1）拉取mysql镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos&#x2F;mysql-57-centos7</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 mysql</span><br></pre></td></tr></table></figure><p>-p 代表端口映射，格式为  宿主机映射端口:容器运行端口</p><p>-e 代表添加环境变量  <code>MYSQL_ROOT_PASSWORD</code>  是root用户的登陆密码</p><p>（3）远程登录mysql</p><p>连接宿主机的IP  ,指定端口为33306 </p><h2 id="4-2-tomcat部署"><a href="#4-2-tomcat部署" class="headerlink" title="4.2 tomcat部署"></a>4.2 tomcat部署</h2><p>（1）拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat:7-jre7</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><p>创建容器  -p表示地址映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;mytomcat -p 9000:8080 </span><br><span class="line">-v &#x2F;usr&#x2F;local&#x2F;webapps:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps tomcat:7-jre7</span><br></pre></td></tr></table></figure><h2 id="4-3-Nginx部署"><a href="#4-3-Nginx部署" class="headerlink" title="4.3 Nginx部署"></a>4.3 Nginx部署</h2><p>（1）拉取镜像    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>（2）创建Nginx容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;mynginx -p 80:80 nginx</span><br></pre></td></tr></table></figure><h2 id="4-4-Redis部署"><a href="#4-4-Redis部署" class="headerlink" title="4.4 Redis部署"></a>4.4 Redis部署</h2><p>（1）拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;myredis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h2 id="4-5-RabbitMQ-部署"><a href="#4-5-RabbitMQ-部署" class="headerlink" title="4.5 RabbitMQ 部署"></a>4.5 RabbitMQ 部署</h2><ol><li>拉取镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull daocloud.io/library/rabbitmq:3.7.14-management-alpine</span><br></pre></td></tr></table></figure><ol start="2"><li>创建容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --hostname my-rabbit --name rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 8080:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 daocloud.io/library/rabbitmq:3.7.14-management-alpine</span><br></pre></td></tr></table></figure><blockquote><p>15672：控制台端口号（浏览器访问的地址)</p><p>5672：应用访问端口号，  使用java连接时的地址</p><p><code>RABBITMQ_DEFAULT_USER</code> :  rabbitmq 用户名</p><p><code>RABBITMQ_DEFAULT_PASS</code> : rabbitmq 密码</p></blockquote><h1 id="5-迁移与备份"><a href="#5-迁移与备份" class="headerlink" title="5 迁移与备份"></a>5 迁移与备份</h1><h2 id="5-1-容器保存为镜像"><a href="#5-1-容器保存为镜像" class="headerlink" title="5.1 容器保存为镜像"></a>5.1 容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit mynginx mynginx_i</span><br></pre></td></tr></table></figure><h2 id="5-2-镜像备份"><a href="#5-2-镜像备份" class="headerlink" title="5.2 镜像备份"></a>5.2 镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker  save -o mynginx.tar mynginx_i</span><br></pre></td></tr></table></figure><h2 id="5-3-镜像恢复与迁移"><a href="#5-3-镜像恢复与迁移" class="headerlink" title="5.3 镜像恢复与迁移"></a>5.3 镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像  然后执行此命令进行恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i mynginx.tar</span><br></pre></td></tr></table></figure><p>-i 输入的文件</p><p>执行后再次查看镜像，可以看到镜像已经恢复</p><h1 id="6-Dockerfile"><a href="#6-Dockerfile" class="headerlink" title="6 Dockerfile"></a>6 Dockerfile</h1><h2 id="6-1-什么是Dockerfile"><a href="#6-1-什么是Dockerfile" class="headerlink" title="6.1 什么是Dockerfile"></a>6.1 什么是Dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p><p>1、对于开发人员：可以为开发团队提供一个完全一致的开发环境；<br>2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了；<br>3、对于运维人员：在部署时，可以实现应用的无缝移植。</p><h2 id="6-2-常用命令"><a href="#6-2-常用命令" class="headerlink" title="6.2 常用命令"></a>6.2 常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>FROM image_name:tag</code></td><td>定义了使用哪个基础镜像启动构建流程</td></tr><tr><td><code>MAINTAINER user_name</code></td><td>声明镜像的创建者</td></tr><tr><td><code>ENV key value</code></td><td>设置环境变量 (可以写多条)</td></tr><tr><td><code>RUN command</code></td><td>是Dockerfile的核心部分(可以写多条)</td></tr><tr><td><code>ADD source_dir/file dest_dir/file</code></td><td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td></tr><tr><td><code>COPY source_dir/file dest_dir/file</code></td><td>和ADD相似，但是如果有压缩文件并不能解压</td></tr><tr><td><code>WORKDIR path_dir</code></td><td>设置工作目录</td></tr></tbody></table><h2 id="6-3-使用脚本创建镜像"><a href="#6-3-使用脚本创建镜像" class="headerlink" title="6.3 使用脚本创建镜像"></a>6.3 使用脚本创建镜像</h2><p>步骤：</p><p>（1）创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir –p &#x2F;usr&#x2F;local&#x2F;dockerjdk8</span><br></pre></td></tr></table></figure><p>（2）下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p><p>（3）创建文件Dockerfile  <code>vi Dockerfile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#依赖镜像名称和ID</span><br><span class="line">FROM centos:7</span><br><span class="line">#指定镜像创建者信息</span><br><span class="line">MAINTAINER zm</span><br><span class="line">#切换工作目录</span><br><span class="line">WORKDIR &#x2F;usr</span><br><span class="line">RUN mkdir  &#x2F;usr&#x2F;local&#x2F;java</span><br><span class="line">#ADD 是相对路径jar,把java添加到容器中</span><br><span class="line">ADD jdk-8u171-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;java&#x2F;</span><br><span class="line"></span><br><span class="line">#配置java环境变量</span><br><span class="line">ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_171</span><br><span class="line">ENV JRE_HOME $JAVA_HOME&#x2F;jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><p>（4）执行命令构建镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t&#x3D;&#39;jdk1.8&#39; .</span><br></pre></td></tr></table></figure><p>注意后边的空格和点，不要省略</p><p>（5）查看镜像是否建立完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h1 id="7-Docker私有仓库"><a href="#7-Docker私有仓库" class="headerlink" title="7 Docker私有仓库"></a>7 Docker私有仓库</h1><h2 id="7-1-私有仓库搭建与配置"><a href="#7-1-私有仓库搭建与配置" class="headerlink" title="7.1 私有仓库搭建与配置"></a>7.1 私有仓库搭建与配置</h2><p>这个镜像版本是2.x 以上的。</p><p>（1）拉取私有仓库镜像（此步省略）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><p>（2）启动私有仓库容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure><p>（3）打开浏览器 输入地址<a href="http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`" target="_blank" rel="noopener">http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`</a> 表示私有仓库搭建成功并且内容为空</p><p>（4）修改daemon.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure><p>添加以下内容，保存退出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//镜像源</span></span><br><span class="line"><span class="attr">"registry-mirrors"</span>: [<span class="string">"http://f1361db2.m.daocloud.io"</span>],</span><br><span class="line">    <span class="comment">//私有仓库地址</span></span><br><span class="line"><span class="attr">"insecure-registries"</span>:[<span class="string">"http://192.168.80.129:5000"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此步用于让 docker信任私有仓库地址</p><p>（5）重启docker 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="7-2-镜像上传至私有仓库"><a href="#7-2-镜像上传至私有仓库" class="headerlink" title="7.2 镜像上传至私有仓库"></a>7.2 镜像上传至私有仓库</h2><p>（1）标记此镜像为私有仓库的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag jdk1.8 192.168.184.141:5000&#x2F;jdk1.8</span><br></pre></td></tr></table></figure><p>（2）再次启动私服容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start registry</span><br></pre></td></tr></table></figure><p>（3）上传标记的镜像</p><p>一定要指定私服地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.184.141:5000&#x2F;jdk1.8</span><br></pre></td></tr></table></figure><h1 id="8-Docker-远程访问"><a href="#8-Docker-远程访问" class="headerlink" title="8 Docker 远程访问"></a>8 Docker 远程访问</h1><ol><li><p>修改宿主机的docker配置，让其可以远程访问<br><code>vi /lib/systemd/system/docker.service</code><br>其中ExecStart=后添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H tcp:&#x2F;&#x2F;0.0.0.0:2375 -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock</span><br></pre></td></tr></table></figure></li><li><p>刷新配置，重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon‐reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br></pre></td></tr></table></figure></li><li><p>测试</p><ol><li>浏览器打开 <code>http://ip:2375/images/json</code> </li><li>使用 <code>docker -H ip info</code> </li></ol></li><li><p>在 idea 里面使用</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
